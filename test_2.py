# -*- coding: utf-8 -*-
"""teste 2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19x1D9QsTPdDJLByCQ1GldSUoXDJUVH1l
"""

!pip install matplotlib numpy

import numpy as np
import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation, PillowWriter

# Constantes
k = 1.38e-23  # Constante de Boltzmann em J/K
T_init = 100  # Temperatura inicial em Kelvin
T_final = 500  # Temperatura final em Kelvin
m = 4.65e-26  # Massa da molécula de gás (aproximadamente massa do N2) em kg

# Função de distribuição de Maxwell-Boltzmann
def maxwell_boltzmann_distribution(v, T, m):
    factor = (m / (2 * np.pi * k * T))**(3/2)
    return 4 * np.pi * (v**2) * factor * np.exp(-m * v**2 / (2 * k * T))

v = np.linspace(0, 2000, 500)  # Vetor de velocidades

fig, ax = plt.subplots()
line, = ax.plot([], [], lw=2)
ax.set_xlim(0, 2000)
ax.set_ylim(0, 0.003)
ax.set_xlabel('Velocidade (m/s)')
ax.set_ylabel('Densidade de probabilidade')
ax.set_title('Distribuição de Maxwell-Boltzmann')

def init():
    line.set_data([], [])
    return line,

def animate(T):
    prob_density = maxwell_boltzmann_distribution(v, T, m)
    line.set_data(v, prob_density)
    ax.set_title(f'Distribuição de Maxwell-Boltzmann (T={T}K)')
    return line,

anim = FuncAnimation(fig, animate, init_func=init, frames=np.arange(T_init, T_final, 10), interval=100, blit=True)

# Salvar a animação como .gif
anim.save('maxwell_boltzmann_distribution.gif', writer=PillowWriter(fps=10))
plt.show()

import numpy as np
import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation

# Constantes
k = 1.38e-23  # Constante de Boltzmann em J/K
T = 300  # Temperatura em Kelvin
m = 4.65e-26  # Massa da molécula de gás (aproximadamente massa do N2) em kg

def maxwell_boltzmann_distribution(v, T, m):
    factor = (m / (2 * np.pi * k * T))**(3/2)
    return 4 * np.pi * (v**2) * factor * np.exp(-m * v**2 / (2 * k * T))

v = np.linspace(0, 2000, 500)  # Vetor de velocidades
prob_density = maxwell_boltzmann_distribution(v, T, m)  # Densidade de probabilidade

fig, ax = plt.subplots()
ax.plot(v, prob_density, label=f'T={T}K')

ax.set_xlabel('Velocidade (m/s)')
ax.set_ylabel('Densidade de probabilidade')
ax.set_title('Distribuição de Maxwell-Boltzmann')
ax.legend()

plt.show()

fig, ax = plt.subplots()
line, = ax.plot([], [], lw=2)
ax.set_xlim(0, 2000)
ax.set_ylim(0, np.max(prob_density) * 1.1)

def init():
    line.set_data([], [])
    return line,

def animate(T):
    prob_density = maxwell_boltzmann_distribution(v, T, m)
    line.set_data(v, prob_density)
    ax.set_title(f'Distribuição de Maxwell-Boltzmann (T={T}K)')
    return line,

anim = FuncAnimation(fig, animate, init_func=init, frames=np.arange(100, 500, 10), interval=100, blit=True)
plt.show()

R = 8.314  # Constante dos gases em J/(mol*K)
n = 1  # Número de mols

# Função para calcular a pressão
def ideal_gas_law(V, T, n, R):
    return (n * R * T) / V

V = np.linspace(0.1, 10, 500)  # Volume em m^3
T_values = [100, 200, 300, 400, 500]  # Diferentes temperaturas em K

fig, ax = plt.subplots()
for T in T_values:
    P = ideal_gas_law(V, T, n, R)
    ax.plot(V, P, label=f'T={T}K')

ax.set_xlabel('Volume (m^3)')
ax.set_ylabel('Pressão (Pa)')
ax.set_title('Lei dos Gases Ideais')
ax.legend()

plt.show()

